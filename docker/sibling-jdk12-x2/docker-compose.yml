version: "3"
services:
  ctr0:
    image: obsidiandynamics/drifter-jdk12
    restart: "no"
    ports:
      - "2200:22"
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on: 
      - consul0
      - kafka0
      - postgres0
    networks:
      - net
      - net0
  consul0:
    image: consul 
    restart: "no"
    environment: {}
    networks:
      net0:
        aliases: 
          - consul
  kafka0:
    image: obsidiandynamics/kafka
    restart: "no"
    networks:
      net0:
        aliases: 
          - kafka
    environment:
      KAFKA_LISTENERS: "INTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
  postgres0:
    image: postgres
    restart: "no"
    environment: {}
    networks:
      net0:
        aliases: 
          - postgres

  ctr1:
    image: obsidiandynamics/drifter-jdk12
    restart: "no"
    ports:
      - "2201:22"
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - net
      - net1
  consul1:
    image: consul 
    restart: "no"
    environment: {}
    networks:
      net1:
        aliases: 
          - consul
  kafka1:
    image: obsidiandynamics/kafka
    restart: "no"
    networks:
      net1:
        aliases: 
          - kafka
    environment:
      KAFKA_LISTENERS: "INTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
  postgres1:
    image: postgres
    restart: "no"
    environment: {}
    networks:
      net1:
        aliases: 
          - postgres

networks:
  net: {}
  net0: {}
  net1: {}